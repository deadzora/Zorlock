// Standard Shader
type vertex
version 330 core
pragma_matrix row_major 
define MAX_BONES 200

layout(location = 0) in vec4 a_Position as Z_Position;
layout(location = 1) in vec3 a_Normal as Z_Normal;
layout(location = 2) in vec3 a_Color as Z_Color;
layout(location = 3) in vec2 a_TexCoord as Z_Texcoord;
layout(location = 4) in vec4 a_BoneIDs as Z_Blendindices;
layout(location = 5) in vec4 a_Weights as Z_Blendweight;

uniform mat4 u_ViewProjection;
uniform mat4 u_Transform;
uniform mat4 u_Bones[MAX_BONES];

out vec4 v_Position as Z_Position;
out vec4 v_Normal as Z_Normal;
out vec3 v_Color as Z_Color;
out vec2 v_TexCoord as Z_Texcoord;
out vec4 v_World as Z_WorldPosition;

function void main()
{
    vec4 newVertex;
	vec4 newNormal;
	
	mat4 BoneTransform = u_Bones[int(a_BoneIDs.x)] * a_Weights.x;
    BoneTransform += u_Bones[int(a_BoneIDs.y)] * a_Weights.y;
    BoneTransform += u_Bones[int(a_BoneIDs.z)] * a_Weights.z;
    BoneTransform += u_Bones[int(a_BoneIDs.w)] * a_Weights.w;

	v_TexCoord = a_TexCoord;
	v_Normal = vec4(a_Normal,1.0);
	v_Normal = Z_Mul(u_Transform, v_Normal);
	v_Normal = normalize(v_Normal);
	v_Color = a_Color;
	v_Position = a_Position;
	//v_Position = Z_Mul(BoneTransform,v_Position);
	v_Position = Z_Mul(u_Transform, v_Position);
	v_Position = Z_Mul(u_ViewProjection, v_Position);		
	v_World = Z_Mul(u_Transform, a_Position);	
	Z_Return(v_Position);		
	
}

type fragment
version 330 core
define NUM_LIGHTS 16

layout(location = 0) out vec4 color as ZColor;

in vec4 v_Position;
in vec4 v_Normal;
in vec3 v_Color;
in vec2 v_TexCoord;
in vec4 v_World;

struct lightbase
{
    vec4 lightpos;   
    vec4 lightcolor;
	float radius;
    float strength;
};
struct surfaceproperties
{
	float specular;
	float shininess;
};
uniform lightbase lights[NUM_LIGHTS];
uniform surfaceproperties u_SurfaceProperties;
uniform vec4 u_Ambient;
uniform vec4 u_ViewPosition;
uniform sampler2D u_Texture;

function void main()
{
	vec4 pixelcolor = texture(u_Texture, v_TexCoord);
	vec4 appliedlight = u_Ambient;
	vec4 viewDir = normalize(u_ViewPosition - v_World);
	
    for (int i = 0; i < NUM_LIGHTS; i++)
    {
		vec4 lightDir = normalize(lights[i].lightpos - v_World); 
		vec4 reflectDir = reflect(-lightDir, v_Normal); 
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_SurfaceProperties.shininess);
		vec4 specular = (u_SurfaceProperties.specular * spec) * lights[i].lightcolor;  
		float diff = max(dot(v_Normal, lightDir), 0.0);
		float distancetolight = distance(v_World,lights[i].lightpos);
		float attenuationFactor = (1.0f + lights[i].radius) / (1.0f + 0.5f * distancetolight + 0.1f * pow(distancetolight, 2));
		diff *= attenuationFactor;
		vec4 diffuse = diff * lights[i].lightcolor;
		vec4 result = (u_Ambient + diffuse + specular) * pixelcolor;
		appliedlight += result;
    }
	color = pixelcolor * appliedlight;
	Z_Return(color);
	
}