// Standard Shader
type vertex
version 330 core

layout(location = 0) in vec4 a_Position as Z_Position;
layout(location = 1) in vec3 a_Normal as Z_Normal;
layout(location = 2) in vec3 a_Color as Z_Color;
layout(location = 3) in vec2 a_TexCoord as Z_Texcoord;

uniform mat4 u_ViewProjection;
uniform mat4 u_Transform;


out vec4 v_Position as Z_Position;
out vec4 v_Normal as Z_Normal;
out vec3 v_Color as Z_Color;
out vec2 v_TexCoord as Z_Texcoord;
out vec4 v_World as Z_WorldPosition;

function void main()
{

	v_TexCoord = a_TexCoord;
	v_Normal = vec4(a_Normal,1.0);
	vec4 worldN = Z_Mul(u_Transform, v_Normal);
	v_Normal = normalize(worldN);
	v_Color = a_Color;
	v_Position = a_Position;
	v_Position = Z_Mul(u_ViewProjection, v_Position);	
	v_World = Z_Mul(u_Transform, v_Position);	
	Z_Return(v_Position);		
	
}

type fragment
version 330 core
define NUM_LIGHTS 16

layout(location = 0) out vec4 color as ZColor;

in vec4 Z_Position;
in vec4 v_Normal;
in vec3 v_Color;
in vec2 v_TexCoord;
in vec4 v_World;

struct lightbase
{
    vec4 lightpos;   
    vec4 lightcolor;
	float radius;
    float strength;
};

uniform lightbase lights[NUM_LIGHTS];
uniform vec4 u_Ambient;
uniform sampler2D u_Texture;

function void main()
{
	vec4 pixelcolor = texture(u_Texture, v_TexCoord);
	vec4 appliedlight = vec4(0,0,0,1);
	appliedlight += u_Ambient;
	
	for (int i = 0; i < NUM_LIGHTS; i++)
	{
		vec4 vectortolight = normalize(lights[i].lightpos - v_World);		
		float diffuseintensity = max(dot(vectortolight, v_Normal), 0);
		float distancetolight = distance(lights[i].lightpos, v_World);
		float attenuationFactor = (1.0f + lights[i].radius) / (1.0f + 0.5f * distancetolight + 0.1f * pow(distancetolight, 2));
		diffuseintensity *= attenuationFactor;
		vec4 diffuselight = diffuseintensity * lights[i].strength * lights[i].lightcolor;
		appliedlight += diffuselight;
	}
	color = pixelcolor * appliedlight;
	Z_Return(color);
	
}